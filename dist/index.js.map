{"version":3,"sources":["../src/types/communications/endpoint-payloads/verify-otp.payloads.ts","../src/types/generic/models/event.model.ts","../src/types/generic/models/fee.enum.ts","../src/types/generic/endpoints/endpoint.interface.ts","../src/types/communications/endpoint-payloads/resend-otp.payloads.ts","../src/types/merchants/models/merchant.model.ts","../src/types/merchants/endpoint-payloads/login.payloads.ts","../src/types/merchants/endpoint-payloads/fetch-profile.payloads.ts","../src/types/merchants/endpoint-payloads/reserve-email.payloads.ts","../src/types/merchants/endpoint-payloads/get-access-token.payloads.ts","../src/types/merchants/endpoint-payloads/reset-password.payloads.ts","../src/types/stores/endpoint-payloads/create-store.payloads.ts","../src/types/stores/endpoint-payloads/list-store-attributes.payloads.ts","../src/types/stores/endpoint-payloads/manage-product.payloads.ts","../src/types/stores/endpoint-payloads/update-store.payload.ts","../src/types/stores/endpoint-payloads/publish-store.payloads.ts","../src/types/stores/endpoint-payloads/manage-collection.payloads.ts","../src/types/stores/models/store.model.ts","../src/types/stores/models/product.model.ts","../src/types/stores/models/cart.model.ts","../src/types/stores/models/order.model.ts","../src/types/utils/models/job.model.ts","../src/types/utils/models/revenue.model.ts"],"sourcesContent":["import { HttpStatusCode } from \"axios\";\nimport { BazeError, Endpoint, HttpMethods } from \"../../generic\";\n\nexport enum OtpContext {\n\tVerifyPhoneNumber = 'verify-phone-number',\n\tVerifyEmail = 'verify-email',\n\tResetPassword = 'reset-password',\n}\n\nexport interface IVerifyOtpPayload {\n    context: OtpContext;\n    token: string;\n}\n\nexport interface IVerifyOtpWithoutAuthPayload {\n\tcontext: OtpContext;\n\ttoken: string;\n\trecipient: string;\n}\n\nexport interface IVerifyOtpResponse {\n    status: boolean;\n    token: string;\n    refreshToken: string;\n}\n\nexport const OtpVerificationErrors: {\n    invalidOtp: BazeError,\n\tretriesUsedUp: BazeError,\n} = {\n\tinvalidOtp: {\n\t\tstatusCode: HttpStatusCode.BadRequest,\n\t\tcode: 'INVALID_OTP',\n\t\tmessage: `This transaction is either invalid or expired`,\n\t\trecommendedActions: [\n\t\t\t`Request a new OTP`\n\t\t]\n\t},\n\tretriesUsedUp: {\n\t\tstatusCode: HttpStatusCode.TooManyRequests,\n\t\tcode: 'RETRIES_USED_UP',\n\t\tmessage: `You've tried too many times. Please request a new OTP`,\n\t\trecommendedActions: [\n\t\t\t`Request a new OTP`\n\t\t]\n\t}\n};\n\nexport const VerifyOtpEndpoint: Endpoint = {\n\tpath: '/otps',\n\tfullPath: '/communications/otps',\n\tparentModule: '/communications',\n\tmethod: HttpMethods.Patch\n};","import { IBase } from \"./base.model\";\n\nexport enum BazeEventSource {\n    cart = 'cart',\n    merchant = 'merchant',\n    order = 'order',\n    customer = 'customer',\n    system = 'system'\n}\n\nexport interface IBazeEvent extends IBase {\n    loggedAt: Date;\n    description: string;\n    source: {\n        id?: string;\n        option: BazeEventSource\n    }\n}","export enum FeeType {\n    fixed = 'fixed',\n    percentage = 'percentage'\n}","export enum HttpMethods {\n\tPost = 'POST',\n\tPut = 'PUT',\n\tGet = 'GET',\n\tPatch = 'PATCH',\n\tDelete = 'DELETE'\n}\n\nexport interface Endpoint {\n\tpath: string;\n\tfullPath?: string;\n    parentModule?: string;\n\tmethod: HttpMethods;\n}","import { Endpoint, HttpMethods } from \"../../generic\";\n\nexport const ResendOtpForEmailVerificationEndpoint: Endpoint = {\n\tpath: '/otps/email-verification',\n\tfullPath: '/communications/otps/email-verification',\n\tparentModule: '/communications',\n\tmethod: HttpMethods.Patch\n};\n\nexport const ResendOtpForPasswordResetEndpoint: Endpoint = {\n\tpath: '/otps/password-reset',\n\tfullPath: '/communications/otps/password-reset',\n\tparentModule: '/communications',\n\tmethod: HttpMethods.Patch\n};\n","import { IBase } from \"../../generic\";\nimport {OtpContext} from \"../../communications\";\n\nexport enum VerificationProvider {\n  identityPass = 'identity-pass'\n}\n\nexport enum VerificationStatus {\n  passed = 'passed',\n  failed = 'failed'\n}\n\nexport interface Verification extends IBase {\n  status: VerificationStatus;\n  description?: string;\n  metadata: unknown;\n}\n\nexport interface IPassword extends IBase {\n  token: string;\n\thint: string;\n\tisActive: boolean\n}\n\nexport enum MerchantAccountStatus {\n    EmailReserved = 'email-reserved',\n    Inactive = 'inactive',\n    Deactivated = 'deactivated',\n    Active = 'active'\n}\n\nexport interface IMerchant extends IBase {\n\tstatus: MerchantAccountStatus;\n  email: string;\n  fullName: string;\n  phoneNumber: string;\n  passwords?: Array<IPassword>;\n\tphoneVerified: boolean;\n  emailVerified: boolean;\n  identityVerified: boolean;\n  hasCreatedStore: boolean;\n  hasAddedBankAccount: boolean;\n  thirdPartyIds: {\n    paystackCustomerCode: string;\n  }\n  lastOtpVerification: {\n    context: OtpContext;\n    time: Date;\n  },\n  verificationAttempts: Array<Verification>;\n  bankAccounts: Array<string>\n}\n","import { HttpStatusCode } from \"axios\";\nimport { BazeError, Endpoint, HttpMethods } from \"../../generic\";\n\nexport interface ILoginPayload {\n    email: string;\n    password: string;\n}\n\nexport interface ILoginResponse {\n    token: string;\n    refreshToken: string;\n}\n\nexport const LoginErrors: {\n    invalidEmailOrPassword: BazeError;\n    deactivatedAccount: BazeError;\n} = {\n\tinvalidEmailOrPassword: {\n\t\tstatusCode: HttpStatusCode.Unauthorized,\n\t\tcode: 'INVALID_EMAIL_OR_PASSWORD',\n\t\tmessage: `The email or password you provided is invalid`,\n\t\trecommendedActions: [\n\t\t\t`Ensure that all your credentials are correct.`,\n\t\t\t`If you're sure that they're correct then you should probably use the \"Forgot Password\" toolkit`\n\t\t]\n\t},\n\tdeactivatedAccount: {\n\t\tstatusCode: HttpStatusCode.Unauthorized,\n\t\tcode: 'DEACTIVATED_ACCOUNT',\n\t\tmessage: `Your account has been deactivated`,\n\t\trecommendedActions: [\n\t\t\t`Reach out to support to find out why it was deactivated`\n\t\t]\n\t}\n};\n\nexport const LoginEndpoint: Endpoint = {\n\tpath: '/auth',\n\tfullPath: '/merchants/auth',\n\tparentModule: '/merchants',\n\tmethod: HttpMethods.Patch\n};","import { HttpStatusCode } from \"axios\";\nimport { BazeError, Endpoint, HttpMethods } from \"../../generic\";\nimport { IMerchant } from \"../models\";\nimport {IStore} from \"../../stores\";\n\nexport interface IFetchProfileResponse {\n  merchant: IMerchant,\n\tstores: Array<IStore>\n}\n\nexport const FetchProfileErrors: {\n    invalidMerchant: BazeError\n} = {\n\tinvalidMerchant: {\n\t\tstatusCode: HttpStatusCode.BadRequest,\n\t\tcode: 'INVALID_MERCHANT',\n\t\tdata: null,\n\t\tmessage: `Invalid merchant requested`,\n\t\trecommendedActions: [\n\t\t\t`Contact support`\n\t\t]\n\t}\n};\n\nexport const ProfileEndpoint: Endpoint = {\n\tpath: '/profile',\n\tfullPath: '/merchants/profile',\n\tparentModule: '/merchants',\n\tmethod: HttpMethods.Patch\n};","import { HttpStatusCode } from \"axios\";\nimport { BazeError, Endpoint, HttpMethods } from \"../../generic\";\nimport { IMerchant } from \"../models\";\n\nexport interface IReserveEmailPayload {\n    email: string;\n    phoneNumber: string;\n    password: string;\n    fullName: string;\n}\n\nexport interface IReserveEmailResponse {\n    merchant: IMerchant;\n    token: string;\n}\n\nexport type PhoneOrEmail = 'phone' | 'email';\n\nexport const ReserveEmailErrors: {\n    compromisedPassword: ( changeDate: Date ) => BazeError;\n    duplicateMerchantDetected: ( d: PhoneOrEmail ) => BazeError;\n    invalidPhoneNumber: BazeError;\n\tcouldNotSendOtp: BazeError;\n} = {\n\tinvalidPhoneNumber: {\n\t\tstatusCode: HttpStatusCode.BadRequest,\n\t\tcode: 'INVALID_PHONE_NUMBER',\n\t\tmessage: `Your phone number isn't quite what we're expecting`,\n\t\trecommendedActions: [\n\t\t\t`Ensure you're providing a proper mobile number`\n\t\t]\n\t},\n\tduplicateMerchantDetected: ( d: PhoneOrEmail ) => {\n\t\treturn {\n\t\t\tstatusCode: HttpStatusCode.BadRequest,\n\t\t\tcode: 'DUPLICATE_MERCHANT_DETECTED',\n\t\t\tmessage: `The ${d} you provided is already taken please provide another one or retrieve your account`,\n\t\t\trecommendedActions: [\n\t\t\t\t`Confirm that your ${d} is correct`,\n\t\t\t\t`If you're sure it's correct then that probably means you already have an account. Try using the account recovery tool`,\n\t\t\t\t`Provide entirely different details`\n\t\t\t]\n\t\t};\n\t},\n\tcompromisedPassword( changeDate: Date ) {\n\t\treturn {\n\t\t\tstatusCode: HttpStatusCode.BadRequest,\n\t\t\tcode: 'COMPROMISED_PASSWORD',\n\t\t\tmessage: `This password is compromised. It was changed on ${changeDate.toDateString()}`,\n\t\t\trecommendedActions: [\n\t\t\t\t`Try using a totally different password`\n\t\t\t],\n\t\t\tdescription: `This happens when a admin tries to use a password they already changed for some reason in the past`\n\t\t};\n\t},\n\tcouldNotSendOtp: {\n\t\tstatusCode: HttpStatusCode.FailedDependency,\n\t\tcode: 'COULD_NOT_SEND_OTP_TO_RESERVE_EMAIL',\n\t\tmessage: `Your account was created but we couldn't send you an OTP`,\n\t\trecommendedActions: [\n\t\t\t`Login and try again in a few minutes`\n\t\t]\n\t}\n};\n\nexport const ReserveEmailEndpoint: Endpoint = {\n\tpath: '',\n\tfullPath: '/merchants',\n\tparentModule: '/merchants',\n\tmethod: HttpMethods.Post\n};","import { Endpoint, HttpMethods } from \"../../generic\";\n\nexport const GetAccessTokenEndpoint: Endpoint = {\n\tpath: '/auth/token',\n\tfullPath: '/merchants/auth/token',\n\tparentModule: '/merchants',\n\tmethod: HttpMethods.Get\n};","import { HttpStatusCode } from \"axios\";\nimport { BazeError, Endpoint, HttpMethods } from \"../../generic\";\n\nexport interface IRequestPasswordResetPayload {\n    email: string;\n}\nexport interface IResetPasswordPayload {\n    password: string;\n    confirmPassword: string;\n}\n\nexport const ResetPasswordErrors: {\n    confirmPasswordMismatch: BazeError;\n    lateResetRequest: BazeError;\n} = {\n\tconfirmPasswordMismatch: {\n\t\tstatusCode: HttpStatusCode.BadRequest,\n\t\tcode: 'CONFIRM_PASSWORD_MISMATCH',\n\t\tmessage: `Your password and confirm password don't match`,\n\t\trecommendedActions: [\n\t\t\t`Ensure both passwords you're providing match`\n\t\t]\n\t},\n\tlateResetRequest: {\n\t\tstatusCode: HttpStatusCode.ExpectationFailed,\n\t\tcode: 'LATE_RESET_REQUEST',\n\t\tmessage: `We couldn't find an otp verification to verify your password reset`,\n\t\trecommendedActions: [\n\t\t\t`Restart the process`,\n\t\t\t`Make sure you reset your password within 5 minutes of verifying the otp you're sent`\n\t\t]\n\t}\n};\n\nexport const ResetPasswordEndpoint: Endpoint = {\n\tpath: '/auth/passwords',\n\tfullPath: '/merchants/auth/passwords',\n\tparentModule: '/merchants',\n\tmethod: HttpMethods.Patch\n};\n\nexport const ForgotPasswordEndpoint: Endpoint = {\n\tpath: '/auth/passwords',\n\tfullPath: '/merchants/auth/passwords',\n\tparentModule: '/merchants',\n\tmethod: HttpMethods.Post\n};","import {BazeError, Endpoint, HttpMethods, ICloudinaryImage} from \"../../generic\";\nimport {HttpStatusCode} from \"axios\";\nimport { IStore, IStoreConfig } from \"../models\";\n\nexport type IRawStoreConfig = Omit<IStoreConfig, \"createdAt\" | \"_id\" | \"updatedAt\" | \"_deletedAt\">\n\nexport interface ICreateStorePayload {\n    name: string;\n    email: string;\n    contactNumber: string;\n    logo: ICloudinaryImage;\n    heroBg: ICloudinaryImage;\n    allowsMessaging: boolean;\n    heroSectionText: string;\n    shippingAndRefundPolicy: string;\n    address: string;\n    config: Array<IRawStoreConfig>;\n}\n\nexport interface ICreateStoreResponse {\n    store: IStore;\n}\n\nexport const CreateStoreErrors: {\n    noSuchAttribute: BazeError;\n    attributeHasNoSuchOption: ( attrName: string ) => BazeError;\n    requiredAttributeNotProvided: BazeError;\n} = {\n\tnoSuchAttribute: {\n\t\tstatusCode: HttpStatusCode.BadRequest,\n\t\tcode: \"NO_SUCH_ATTRIBUTE\",\n\t\tmessage: `This attribute does not exist`\n\t},\n\tattributeHasNoSuchOption: ( attrName: string ) => {\n\t\treturn {\n\t\t\tstatusCode: HttpStatusCode.BadRequest,\n\t\t\tcode: \"ATTRIBUTE_HAS_NO_SUCH_OPTION\",\n\t\t\tmessage: `Attribute ${ attrName } does not accommodate some options provided for it`\n\t\t};\n\t},\n\trequiredAttributeNotProvided: {\n\t\tstatusCode: HttpStatusCode.BadRequest,\n\t\tcode: \"REQUIRED_ATTRIBUTE_NOT_PROVIDED\",\n\t\tmessage: 'Required attribute(s) not provided',\n\t\trecommendedActions: [\n\t\t\t'Please provide all required attributes'\n\t\t]\n\t}\n};\n\nexport const CreateStoreEndpoint: Endpoint = {\n\tpath: '/stores',\n\tfullPath: '/stores',\n\tparentModule: '/stores',\n\tmethod: HttpMethods.Post\n};","import {Endpoint, HttpMethods} from \"../../generic\";\nimport { IStoreAttribute, IStoreAttributeOption } from \"../models\";\n\nexport interface IListStoreAttributesResponse {\n    attributes: Array<IStoreAttribute & {\n        options: Array<IStoreAttributeOption>\n    }>\n}\n\nexport const ListStoreAttributesEndpoint: Endpoint = {\n\tpath: '/active-attributes',\n\tfullPath: '/store-mgt/active-attributes',\n\tparentModule: '/stores',\n\tmethod: HttpMethods.Get\n};","import { ICollection, IProduct, IProductQuantityConfig, IProductVariant, ProductStatus } from \"../models\";\nimport { BazeError, Endpoint, HttpMethods, ICloudinaryImage } from \"../../generic\";\nimport { HttpStatusCode } from \"axios\";\n\nexport const CreateProductErrors: {\n    noSuchStoreForMerchant: BazeError,\n} = {\n\tnoSuchStoreForMerchant: {\n\t\tstatusCode: HttpStatusCode.BadRequest,\n\t\tcode: \"NO_SUCH_STORE_FOR_MERCHANT\",\n\t\tmessage: \"This store does not exist for this merchant\"\n\t}\n};\n\nexport const UpdateProductErrors: {\n    noSuchStoreForMerchant: BazeError,\n    noSuchProductInStore: BazeError\n} = {\n\t...CreateProductErrors,\n\tnoSuchProductInStore: {\n\t\tstatusCode: HttpStatusCode.BadRequest,\n\t\tcode: \"NO_SUCH_PRODUCT_IN_STORE\",\n\t\tmessage: \"This product does not exist in this store\"\n\t}\n};\n\nexport interface ICreateProductPayload {\n    store: string;\n    name: string;\n    price: number;\n    status: ProductStatus;\n    images?: Array<ICloudinaryImage>;\n    quantity: number;\n    description: string;\n    variantConfig?: {\n        quantityAndPrice: Array<IProductQuantityConfig>;\n        variants: IProductVariant\n    }\n}\n\nexport interface ICreateProductResponse {\n    product: IProduct;\n}\n\nexport interface IListProductsResponse {\n    products: Array<IProduct>;\n}\n\nexport interface IUpdateProductPayload extends Partial<ICreateProductPayload> { }\n\nexport interface IUpdateProductResponse extends ICreateProductResponse {}\nexport interface IViewOneProductResponse extends ICreateProductResponse {\n    collections: Array<ICollection>\n}\n\nexport interface IChangeCollectionsForProductPayload {\n    collections: Array<string>\n}\n\nexport interface IUploadProductCsvPayload {\n    url: string;\n}\n\nexport const CreateProductEndpoint: Endpoint = {\n\tpath: '/products',\n\tfullPath: '/products',\n\tparentModule: '/products',\n\tmethod: HttpMethods.Post\n};\n\nexport const ListProductsForStoreEndpoint: Endpoint = {\n\tpath: '/list-for-store',\n\tfullPath: '/products/list-for-store',\n\tparentModule: '/products',\n\tmethod: HttpMethods.Get\n};\n\nexport const ViewOneProductEndpoint: Endpoint = {\n\tpath: '/view-one',\n\tfullPath: '/products/view-one',\n\tparentModule: '/products',\n\tmethod: HttpMethods.Get\n};\n\nexport const UpdateProductEndpoint: Endpoint = {\n\tpath: '/products',\n\tfullPath: '/products',\n\tparentModule: '/products',\n\tmethod: HttpMethods.Patch\n};\n","import { HttpStatusCode } from \"axios\";\nimport { BazeError, Endpoint, HttpMethods } from \"../../generic\";\nimport { CreateStoreErrors } from \"./create-store.payloads\";\n\nexport const UpdateStoreErrors: {\n  noSuchStore: BazeError;\n  noSuchAttribute: BazeError;\n  attributeHasNoSuchOption: ( attrName: string ) => BazeError;\n} = {\n\tnoSuchStore: {\n\t\tstatusCode: HttpStatusCode.BadRequest,\n\t\tcode: \"NO_SUCH_STORE\",\n\t\tmessage: `This store does not exist`\n\t},\n\tnoSuchAttribute: CreateStoreErrors.noSuchAttribute,\n\tattributeHasNoSuchOption: CreateStoreErrors.attributeHasNoSuchOption\n};\n\nexport const UpdateStoreEndpoint: Endpoint = {\n\tpath: '/stores',\n\tfullPath: '/stores',\n\tparentModule: '/stores',\n\tmethod: HttpMethods.Patch\n};\n","import { BazeError, Endpoint, HttpMethods } from \"../../generic\";\nimport { HttpStatusCode } from \"axios\";\nimport { IStore, } from \"../models\";\n\nexport interface IPublishStorePayload {\n\tsubdomain: string;\n}\n\nexport interface IFetchStoreSubdomainSuggestionPayload {\n\tstore: string;\n}\n\nexport interface IFetchStoreSubdomainSuggestionRes {\n\tsuggestedSubdomain: string;\n}\n\nexport interface IPublishStoreRes {\n\tstore: IStore;\n}\n\n\nexport const PublishStoreErrors: {\n\tusedSubdomain: BazeError;\n\tstoreAlreadyPublished: BazeError;\n} = {\n\tusedSubdomain: {\n\t\tstatusCode: HttpStatusCode.BadRequest,\n\t\tmessage: 'This subdomain is already in use by another store',\n\t\tcode: 'USED_SUBDOMAIN',\n\t\trecommendedActions: [\n\t\t\t`Try setting another subdomain`\n\t\t]\n\t},\n\tstoreAlreadyPublished: {\n\t\tstatusCode: HttpStatusCode.BadRequest,\n\t\tmessage: `This store is already published`,\n\t\tcode: 'STORE_ALREADY_PUBLISHED',\n\t}\n};\n\nexport const PublishStoreEndpoint: Endpoint = {\n\tpath: '/publish',\n\tfullPath: '/stores/publish',\n\tparentModule: '/stores',\n\tmethod: HttpMethods.Patch\n};\n\nexport const SuggestStoreSubdomainsEndpoint: Endpoint = {\n\tpath: '/subdomain-suggestions',\n\tfullPath: '/stores/subdomain-suggestions',\n\tparentModule: '/stores',\n\tmethod: HttpMethods.Get\n};\n","import { Endpoint, HttpMethods } from \"../../generic\";\nimport { ICollection } from \"../models\";\n\nexport enum AddOrRemove {\n    add = 'add',\n    remove = 'remove'\n}\n\nexport interface ICreateCollectionPayload {\n    name: string\n}\n\nexport interface ICreateCollectionWithProductsPayload {\n    name: string;\n    products: Array<string>;\n}\n\nexport interface IEditCollectionPayload {\n    name: string\n}\n\nexport interface IManageCollectionProductsPayload {\n    action: AddOrRemove,\n    products: Array<string>\n}\n\nexport interface IChangeCollectionProductsPayload {\n    products: Array<string>\n}\n\nexport interface ICollectionResponse {\n    collection: ICollection\n}\n\nexport interface IListCollectionsResponse {\n    collections: Array<ICollection>\n}\n\nexport const CreateCollectionEndpoint: Endpoint = {\n\tpath: '/collections',\n\tfullPath: '/stores/collections',\n\tmethod: HttpMethods.Post\n};\n\nexport const EditCollectionEndpoint: Endpoint = {\n\tpath: '/collections',\n\tfullPath: '/stores/collections',\n\tmethod: HttpMethods.Patch\n};\n\nexport const ListCollectionsEndpoint: Endpoint = {\n\tpath: '/collections/list-for-store',\n\tfullPath: '/stores/collections/list-for-store',\n\tmethod: HttpMethods.Get\n};\n\nexport const ViewOneCollectionEndpoint: Endpoint = {\n\tpath: '/collections/view-one',\n\tfullPath: '/stores/collections/view-one',\n\tmethod: HttpMethods.Get\n};\n\nexport const DeleteCollectionEndpoint: Endpoint = {\n\tpath: '/collections',\n\tfullPath: '/stores/collections',\n\tmethod: HttpMethods.Delete\n};\n\nexport const ManageCollectionEndpoint: Endpoint = {\n\tpath: '/collections/products',\n\tfullPath: '/stores/collections/products',\n\tmethod: HttpMethods.Patch\n};\n\nexport const ChangeCollectionProductsEndpoint: Endpoint = {\n\tpath: '/collections/mutations',\n\tfullPath: '/stores/collections/mutations',\n\tmethod: HttpMethods.Patch\n};\n\n","import {FeeType, IBase, ICloudinaryImage} from \"../../generic\";\n\nexport interface IStoreAttribute extends IBase {\n    name: string;\n    slug: string;\n    isMandatoryForActivation: boolean;\n    isActive: boolean;\n}\n\nexport interface IStoreAttributeOption extends IBase {\n    attribute: string;\n    slug: string;\n    value: string;\n    isActive: boolean;\n}\n\nexport interface IStoreConfig extends IBase {\n    attribute: string;\n    options?: Array<string>;\n    rawChoices?: Array<unknown>;\n}\n\nexport interface IWebstoreConfig extends IBase {\n    attribute: IStoreAttribute;\n    options?: Array<IStoreAttributeOption>;\n    rawChoices?: Array<unknown>;\n}\n\nexport interface IStoreShippingFee extends IBase {\n    name: string;\n    description: string;\n    amount: number;\n}\n\nexport interface IStoreFee extends IBase {\n    name: string;\n    type: FeeType;\n    amount: number;\n}\n\nexport enum StoreStatus {\n    live = 'live',\n    maintenance = 'maintenance'\n}\n\nexport interface IStore extends IBase {\n    merchantId: string;\n    name: string;\n    isLive: boolean;\n    status: StoreStatus;\n    contactEmails: Array<string>;\n    logo: ICloudinaryImage;\n    heroBg: ICloudinaryImage;\n    allowsMessaging: boolean;\n    heroSectionText: string;\n    contactNumbers: Array<string>;\n    subdomains: [\n        {\n            name: string;\n            isActive: boolean;\n        }\n    ]\n    policies: Array<{\n        name: string;\n        content: string;\n    }>;\n    addresses: Array<{\n        name: string;\n        location: unknown;\n    }>;\n    config: Array<IStoreConfig>;\n    shippingFees: Array<IStoreShippingFee>;\n    fees: Array<IStoreFee>;\n}\n\nexport interface IWebStore extends Omit<IStore, 'config'> {\n    config: Array<IWebstoreConfig>;\n}","import {IBase, ICloudinaryImage} from \"../../generic\";\n\nexport enum ProductStatus {\n    published = 'published',\n    drafted = 'drafted',\n    shelved = 'shelved'\n}\n\nexport type IProductQuantityOption = IBase & {\n    variant: string;\n    option: string;\n}\n\nexport type IWebstoreProductQuantityOption = IBase & {\n    variant: string;\n    variantName: string;\n    option: string;\n    optionName: string;\n}\n\nexport type IProductVariantOption = IBase & {\n    name: string;\n    uuid: string;\n}\n\nexport interface IProductQuantityConfig extends IBase {\n    options: Array<IProductQuantityOption>\n    quantity: number;\n    price: number;\n    uuid: string;\n}\nexport interface IWebstoreProductQuantityConfig extends Partial<IProductQuantityConfig> {\n    options: Array<IWebstoreProductQuantityOption>;\n}\n\nexport interface IProductVariantConfig extends IBase {\n    uuid: string;\n    name: string;\n    options: Array<IProductVariantOption>\n}\n\nexport interface IProductVariant extends IBase {\n    hasDifferentPrices: boolean;\n    config: Array<IProductVariantConfig>\n}\n\nexport interface IProduct extends IBase {\n    store: string;\n    slug: string;\n    name: string;\n    price: number;\n    copiesSold: number;\n    status: ProductStatus;\n    images: Array<ICloudinaryImage>;\n    collections: Array<string>;\n    quantity: number;\n    description: string;\n    variantConfig: {\n        quantityAndPrice: Array<IProductQuantityConfig>;\n        variants: IProductVariant\n    }\n}\n\n","import { IBase, IBazeEvent, ICloudinaryImage } from \"../../generic\";\nimport { IProductVariantConfig, IWebstoreProductQuantityConfig } from \"./product.model\";\nimport { IStoreFee, IStoreShippingFee } from \"./store.model\";\n\nexport enum CartStatus {\n    shopping = 'shopping',\n    addedCustomer = 'added-customer',\n    addedDeliveryDetails = 'added-delivery-details',\n    initiatedPayment = 'initiated-payment',\n    abandoned = 'abandoned',\n    checkedOut = 'checked-out'\n}\n\nexport interface IWebstoreCartItem extends IBase {\n    product: string;\n    quantity: number;\n    price: number;\n    quantityInStock: number;\n    variantOption?: IWebstoreProductQuantityConfig;\n    errors?: Array<string>\n\n    metadata?: {\n        name?: string;\n        isVariantProduct?: boolean;\n        productImages?: Array<ICloudinaryImage>\n    }\n}\n\nexport interface IWebstoreCart extends IBase {\n    store?: string;\n    items: Array<IWebstoreCartItem>\n    errors?: Array<string>;\n    customer?: {\n        firstName: string\n        lastName: string\n        email: string\n        phone: string,\n        deliveryAddress: string,\n        orderNote?: string\n    };\n    shippingFee?: IStoreShippingFee;\n    fees?: Array<IStoreFee>;\n    status: CartStatus;\n    metadata: {\n        totalAmount: number;\n        itemTotalWithoutCharges: number;\n    }\n}\n\nexport interface IVariantAndOption {\n    variant: string;\n    option: string;\n}\n\nexport interface ICartItem extends IBase {\n    product: string;\n    quantity: number;\n    variants?: Array<IVariantAndOption>;\n    metadata: {\n        snapshots: {\n            price?: number;\n            chosenVariants?: Array<IProductVariantConfig>;\n            quantityInStock?: number;\n            productName?: string;\n            productImages?: Array<ICloudinaryImage>;\n        }\n    }\n}\n\nexport interface ICart extends IBase {\n    store: string;\n    customer?: string;\n    items: Array<ICartItem>;\n    shippingFee?: IStoreShippingFee;\n    fees?: Array<IStoreFee>;\n    status: CartStatus;\n    metadata: {\n        totalAmount: number;\n        events: Array<IBazeEvent>;\n    }\n}","import { IBase, IBazeEvent } from \"../../generic\";\n\nexport enum OrderStatus {\n    awaitingPayment = 'awaiting-payment',\n    pendingDispatch = 'pending-dispatch',\n    dispatched = 'dispatched',\n    cancelled = 'cancelled',\n    cancelledWithRefund = 'cancelled-with-refund'\n}\n\nexport enum PaymentMethod {\n    offlineTransfer = 'offline-transfer',\n    physicalCash = 'physical-cash',\n    bazeWebstore = 'baze-webstore',\n    paymentLink = 'payment-link'\n}\n\nexport enum PaymentGateway {\n    paystack = 'paystack'\n}\n\nexport enum SalesChannel {\n    baze = 'baze',\n    whatsapp = 'whatsapp',\n    instagram = 'instagram',\n    twitter = 'twitter',\n    physicalStore = 'physical-store',\n    phone = 'phone',\n    other = 'other'\n}\n\nexport interface IOrder extends IBase {\n    store: string;\n    customer: string;\n    cart: string;\n    status: OrderStatus;\n    note?: string;\n    channel: {\n        option: SalesChannel;\n        description?: string;\n    };\n    events: Array<IBazeEvent>;\n    payment: {\n        reference: string;\n        gateway: PaymentGateway;\n        amountPaid: number;\n        processingFee: number;\n    }\n    metadata: {\n        revenue: string;\n    }\n}","import {IBase} from \"../../generic\";\n\nexport enum JobStatus {\n  initiated = 'initiated',\n  pending = 'pending',\n  completed = 'completed',\n  failed = 'failed'\n}\n\nexport enum JobTask {\n  bulkCustomerUpload = 'bulk-customer-upload',\n  bulkProductUpload = 'bulk-product-upload'\n}\n\nexport enum JobClientType {\n  merchant = 'merchant',\n  customer = 'customer',\n  store = 'store',\n  admin = 'admin',\n  system = 'system'\n}\n\nexport interface IJob<T = unknown> extends IBase {\n  status: JobStatus;\n  client: {\n    type: JobClientType;\n    id?: string;\n  }\n  reports: Array<string>;\n  description: string;\n  task: JobTask;\n  metadata: T;\n}\n","import { FeeType, IBase } from \"../../generic\";\n\nexport enum RevenueSource {\n    order = 'order'\n}\n\nexport enum Partner {\n    paystack = 'paystack'\n}\n\nexport interface ThirdPartyFee {\n    amount: number;\n    partner: { \n        name: Partner;\n        fee: {\n            type: FeeType;\n            value: number;\n        }\n    };\n}\n\nexport interface IRevenue extends IBase {\n    source: {\n        option: RevenueSource;\n        id?: string;\n    };\n    amount: number;\n    outflow: Array<ThirdPartyFee>;\n    inflow: number;\n}"],"mappings":"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","names":["BazeEventSource","FeeType","HttpMethods","OtpContext","VerificationProvider","VerificationStatus","MerchantAccountStatus","HttpStatusCode","HttpStatusCode","HttpStatusCode","HttpStatusCode","HttpStatusCode","HttpStatusCode","HttpStatusCode","HttpStatusCode","HttpStatusCode","HttpStatusCode","HttpStatusCode","HttpStatusCode","HttpStatusCode","HttpStatusCode","AddOrRemove","StoreStatus","ProductStatus","CartStatus","OrderStatus","PaymentMethod","PaymentGateway","SalesChannel","JobStatus","JobTask","JobClientType","RevenueSource","Partner"]}